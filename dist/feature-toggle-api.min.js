"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};exports.default=featuretoggleapi;var _showLogs=!1;function initVisibilities(){var i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t={};return Object.keys(i).forEach(function(e){t[e]=parseToFn(i[e])}),t}var _log=function(e){if(!0===_showLogs){var i=-1!=e.indexOf("<b>"),t=-1!=e.indexOf("visible"),r=-1!=e.indexOf("hidden"),n=e.replace("visible","%cvisible");if(n=n.replace("hidden","%chidden"),t)console.log(n,"color:green;font-weight:bold;");else if(r)console.log(n,"color:red;font-weight:bold;");else if(i){var o=[n=n.replace("<b>","%c"),"font-weight:bold;"];console.log.apply(null,o)}else console.log(e)}},parseToFn=function(e){return"boolean"==typeof e?function(){return e}:e},_logAndReturn=function(e,i){return _log(i),_log(""),e},getVisibility=function(e,i,t,r,n){if(null!=e){var o=e(t,r,n);return"boolean"==typeof o?o:_logAndReturn(!1,"The "+i+" returns "+o+". => Please return true or false. This result (and all non-boolean results) will return false.")}},getKey=function(e,i){var t=e.toLowerCase();return"string"==typeof i&&(t+="#"+i.toLowerCase()),t},parseKey=function(e){var i=e.split("#");return{name:i[0],variant:1<i.length?i[1]:void 0}};function featuretoggleapi(e){var v=initVisibilities(e),l=[];return{name:"feature-toggle-api",logAndReturn:function(e,i,t,r,n){return _logAndReturn(e,i)},log:function(e){_log(e)},on:function(e,r,i){if(-1==["visibilityrule"].indexOf(e.toLowerCase()))throw new Error('Eventtype "'+e.toLowerCase()+'" does not exist. Only "visibilityrule" is valid');l.push(r),null!=i&&i.ignorePreviousRules||Object.keys(v).forEach(function(e){var i=parseKey(e),t=v[e];r(t(i.name,i.variant),i.name,i.variant,t)})},showLogs:function(e,i,t){_showLogs=null==e||e},isVisible:function(e,i,t){return this.methods._isVisible(e,i,t)},visibility:function(i,e,t){if(null==i)throw new Error("feature.visibility(): 1st parameter name must be defined");if(null==e)throw new Error("feature.visibility(): 2nd parameter must either be the variant name or a function");if(void 0!==e&&null==t&&"string"==typeof e)throw new Error("feature.visibility(): 3nd parameter must be a function when the 2nd parameter is the variant name");var r=getKey(i,e),n="string"==typeof e?e:void 0,o=parseToFn(null==t?e:t);v[r]=o,l.forEach(function(e){getKey(i,n);e(o(i,n),i,n,o)})},requiredVisibility:function(e){if("function"!=typeof e)throw new Error("feature.requiredVisibility(): 1st parameter must be a function, but is "+(void 0===e?"undefined":_typeof(e)));v._required=parseToFn(e)},defaultVisibility:function(e){if("function"!=typeof e)throw new Error("feature.defaultVisibility(): 1st parameter must be a function, but is "+(void 0===e?"undefined":_typeof(e)));v._default=parseToFn(e)},methods:{_isVisible:function(e,i,t){if(_log('Check Visibility of <b>Feature "'+e+'", variant "'+(null==i?"":i)+'"'+(t?" with data "+JSON.stringify(t):"")+"."),null==e)throw new Error('The attribute "name" is required for tag <feature></feature>. Example: <feature name="aname"></feature>');var r=v._required,n=null!=v._required,o=getVisibility(r,"requiredVisibility",t,e,i),l=getKey(e,i),u=v[l],s=null!=v[l],a=getVisibility(u,"visibility function",t,e,i),f=null!=i,d=getKey(e,null),b=v[d],y=(v[d],getVisibility(b,"visibility function (only name)",t,e,i)),h=v._default,c=null!=v._default,g=getVisibility(h,"defaultVisibility",t,e,i);if(n){if(n&&!0===o)_log("The requiredVisibility rule returns true. This feature will be shown when no other rule rejects it.");else if(n&&!1===o)return _logAndReturn(!1,"The requiredVisibility rule returns false. This feature will be hidden.")}else _log("No requiredVisibility rule specified for this feature.");return s?_logAndReturn(a,"The visibility rule returns "+a+". This feature will be "+(a?"visible":"hidden")+"."):(_log("No visibility rule found matching name and variant."),f&&"boolean"==typeof y?_logAndReturn(y,"Found a visibility rule for name "+e+" without variants. The rule returns "+y+". => This feature will be "+(y?"visible":"hidden")+"."):(f&&_log("No rules found for name "+e+" without variants."),c?_logAndReturn(g,"Found a defaultVisibility rule. The rule returns "+g+". => This feature will be "+(g?"visible":"hidden")+"."):(_log("No default rule found."),n?_logAndReturn(!0,"Only the requiredVisibility rule was found. This returned true. => This feature will be visible."):_logAndReturn(!1,"No rules were found. This feature will be hidden.",e,i,t))))}}}}
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};exports.default=featuretoggleapi;var _showLogs=!1;function initVisibilities(){var i=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},t={};return Object.keys(i).forEach(function(e){t[e]=parseToFn(i[e])}),t}var _log=function(e){if(!0===_showLogs){var i=-1!=e.indexOf("<b>"),t=-1!=e.indexOf("visible"),n=-1!=e.indexOf("hidden"),r=e.replace("visible","%cvisible");if(r=r.replace("hidden","%chidden"),t)console.log(r,"color:green;font-weight:bold;");else if(n)console.log(r,"color:red;font-weight:bold;");else if(i){var l=[r=r.replace("<b>","%c"),"font-weight:bold;"];console.log.apply(null,l)}else console.log(e)}},parseToFn=function(e){return"boolean"==typeof e?function(){return e}:e},_logAndReturn=function(e,i){return _log(i),_log(""),e},getVisibility=function(e,i,t,n,r){if(null!=e){var l=e(t,n,r);return"boolean"==typeof l?l:_logAndReturn(!1,"The "+i+" returns "+l+". => Please return true or false. This result (and all non-boolean results) will return false.")}},getKey=function(e,i){var t=e.toLowerCase();return"string"==typeof i&&(t+="#"+i.toLowerCase()),t};function getRule(e,i){var t=e.split("#");return{name:t[0],variant:1<t.length?t[1]:void 0,data:i[e]}}function visibilityFnParams(e,i,t,n){if(null==e)throw new Error("feature.visibility(): 1st parameter name must be defined");if(1==arguments.length)throw new Error("feature.visibility(): 2nd parameter name must be a boolean or function, but is empty");var r=null,l=null,o=null;return null==t&&null==n?o=i:null==n?(r=i,o=t):(r=i,l=t,o=n),{name:e,variant:r,data:l,result:o}}function featuretoggleapi(e){var v=initVisibilities(e),u={},a=[];return{name:"feature-toggle-api",logAndReturn:function(e,i){return _logAndReturn(e,i)},log:function(e){_log(e)},on:function(e,n,i){if(-1==["visibilityrule"].indexOf(e.toLowerCase()))throw new Error('Eventtype "'+e.toLowerCase()+'" does not exist. Only "visibilityrule" is valid');a.push(n),null!=i&&i.ignorePreviousRules||Object.keys(v).forEach(function(e){var i=getRule(e,u),t=v[e];n(t(i.name,i.variant,i.data),i.name,i.variant,i.data)})},showLogs:function(e,i,t){_showLogs=null==e||e},isVisible:function(e,i,t){return this.methods._isVisible(e,i,t)},visibility:function(e,i,t,n){var r=visibilityFnParams(e,i,t,n),l=getKey(r.name,r.variant),o=parseToFn(r.result);v[l]=o,u[l]=r.data,a.forEach(function(e){e(o(r.name,r.variant,r.data),r.name,r.variant,r.data)})},requiredVisibility:function(e){if("function"!=typeof e)throw new Error("feature.requiredVisibility(): 1st parameter must be a function, but is "+(void 0===e?"undefined":_typeof(e)));v._required=parseToFn(e)},defaultVisibility:function(e){if("function"!=typeof e)throw new Error("feature.defaultVisibility(): 1st parameter must be a function, but is "+(void 0===e?"undefined":_typeof(e)));v._default=parseToFn(e)},methods:{_isVisible:function(e,i,t){if(_log('Check Visibility of <b>Feature "'+e+'", variant "'+(null==i?"":i)+'"'+(t?" with data "+JSON.stringify(t):"")+"."),null==e)throw new Error('The attribute "name" is required for tag <feature></feature>. Example: <feature name="aname"></feature>');var n=v._required,r=null!=v._required,l=getVisibility(n,"requiredVisibility",e,i,t),o=getKey(e,i),u=v[o],a=null!=v[o],s=getVisibility(u,"visibility function",e,i,t),f=null!=i,d=getKey(e,null),b=v[d],y=(v[d],getVisibility(b,"visibility function (only name)",e,i,t)),c=v._default,g=null!=v._default,h=getVisibility(c,"defaultVisibility",e,i,t);if(r){if(r&&!0===l)_log("The requiredVisibility rule returns true. This feature will be shown when no other rule rejects it.");else if(r&&!1===l)return _logAndReturn(!1,"The requiredVisibility rule returns false. This feature will be hidden.")}else _log("No requiredVisibility rule specified for this feature.");return a?_logAndReturn(s,"The visibility rule returns "+s+". This feature will be "+(s?"visible":"hidden")+"."):(_log("No visibility rule found matching name and variant."),f&&"boolean"==typeof y?_logAndReturn(y,"Found a visibility rule for name "+e+" without variants. The rule returns "+y+". => This feature will be "+(y?"visible":"hidden")+"."):(f&&_log("No rules found for name "+e+" without variants."),g?_logAndReturn(h,"Found a defaultVisibility rule. The rule returns "+h+". => This feature will be "+(h?"visible":"hidden")+"."):(_log("No default rule found."),r?_logAndReturn(!0,"Only the requiredVisibility rule was found. This returned true. => This feature will be visible."):_logAndReturn(!1,"No rules were found. This feature will be hidden."))))}}}}